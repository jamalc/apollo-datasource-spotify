schema {
  query: Query
}

interface SpotifyModel {
  id: ID!
  uri: SpotifyURI!
  type: SpotifyModelType!
  href: URL!
}

union Search = Album | Artist

scalar URL

scalar SpotifyURI

scalar DateTime

type Query {
  album: Album
  albums: [Album!]
  artist: Artist
  artists: [Artist!]
  episode(id: ID!): Episode
  episodes: [Episode!]
  playlist(id: ID!): Playlist
  playlists: [Playlist!]
  track(id: String): Track
  tracks: [Track!]
  search: Search!
}

type Album {
  albumType: AlbumType
  artists: [Artist!]
  availableMarkets: [CountryCode!]
  copyrights: String
  externalIds: ExternalIDs
  externalUrls: ExternalURLs
  genres: [String]
  href: URL!
  id: ID!
  images: [Image!]
  label: String
  name: String
  popularity: Int
  releaseDate: String
  releaseDatePrecision: ReleaseDatePrecisionType
  tracks: [Track]
  type: SpotifyModelType
  uri: SpotifyURI!
}

type SavedAlbum {
  addedAt: DateTime!
  album: Album!
}

type Artist implements SpotifyModel {
  externalUrls: [ExternalURLs!]
  genres: [String!]
  href: URL!
  id: ID!
  images: [Image!]
  name: String!
  popularity: Int
  type: SpotifyModelType!
  uri: SpotifyURI!
}

type Category {
  id: ID!
  name: String!
  href: URL!
  icons: [Image!]
}

type Copyrights {
  text: String!
  type: CopyrightType!
}

type Episode implements SpotifyModel {
  audioPreviewUrl: String
  description: String
  durationMs: Int
  explicit: Boolean
  externalUrls: ExternalURLs
  href: URL!
  id: ID!
  images: [Image!]
  isExternallyHosted: Boolean
  isPlayable: Boolean
  language: LanguageCode
  languages: [LanguageCode!]
  name: String
  releaseDate: DateTime
  releaseDatePrecesion: ReleaseDatePrecisionType
  resumePoint: ResumePoint
  show: Show
  type: SpotifyModelType!
  uri: SpotifyURI!
}

type ExternalIDs {
  isrc: String
  ean: String
  upc: String
}

type ExternalURLs {
  spotify: String!
}

type Image {
  url: String
  height: Int
  width: Int
}

type Playlist implements SpotifyModel {
  description: String
  externalUrls: ExternalURLs
  href: URL!
  id: ID!
  images: [Image]!
  collaborative: Boolean!
  publicAccess: Boolean!
  public: Boolean
  name: String!
  owner: PlaylistOwner
  snapshotId: String
  tracks: [Track!]
  type: SpotifyModelType!
  uri: SpotifyURI!
}

type PlaylistTrack {
  addedAt: String
  addedBy: User
  isLocal: Boolean!
  track: Track!
}

type PlaylistOwner implements SpotifyModel {
  displayName: String!
  externalUrls: ExternalURLs!
  href: URL!
  id: ID!
  type: SpotifyModelType!
  uri: SpotifyURI!
}

type ResumePoint {
  fullyPlayed: Boolean
  resumePositionMs: Int
}

type Show implements SpotifyModel {
  availableMarkets: [CountryCode!]
  copyrights: Copyrights
  description: String
  episodes: [Episode!]
  explicit: Boolean
  externalUrls: ExternalURLs
  href: URL!
  id: ID!
  isExternallyHosted: Boolean
  languages: [LanguageCode!]
  mediaType: String
  name: String
  publisher: String
  totalEpisodes: Int
  type: SpotifyModelType!
  uri: SpotifyURI!
}

type Track implements SpotifyModel {
  album: Album
  artists: [Artist!]
  availableMarkets: [CountryCode!]
  discNumber: Int
  durationMs: Int
  explicit: Boolean!
  externalIds: ExternalIDs
  externalUrls: ExternalURLs
  href: URL!
  id: ID!
  name: String!
  playable: Boolean!
  popularity: Int
  previewUrl: String
  trackNumber: Int
  type: SpotifyModelType!
  uri: SpotifyURI!
}

type SavedTrack {
  addedAt: DateTime!
  track: Track!
}

type User implements SpotifyModel{
  birthdate: DateTime
  country: CountryCode
  displayName: String
  email: String!
  externalUrls: ExternalURLs
  href: URL!
  id: ID!
  images: [Image!]
  playlists: [Playlist!]
  product: SpotifyPoductType
  type: SpotifyModelType!
  uri: SpotifyURI!
}

type PlayHistory {
  track: Track!
  playedAt: DateTime!
  context: Context
}

type Context {
  # artist | playlist | album
  type: String!
  href: String!
  externalUrls: ExternalURLs!
  uri: String!
}

union Item =
    Artist
  | Track
  | SavedAlbum
  | SavedTrack
  | Playlist
  | PlaylistTrack

type PagingObject {
  href: String
  items: [Item]
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
}

enum AlbumType {
  ALBUM
  SINGLE
  COMPILATION
}

enum LanguageCode {
  EN
}

enum CountryCode {
  AC
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AN
  AO
  AQ
  AR
  AS
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BU
  BV
  BW
  BY
  BZ
  CA
  CC
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CP
  CR
  CS
  CU
  CV
  CW
  CX
  CY
  CZ
  DE
  DG
  DJ
  DK
  DM
  DO
  DZ
  EA
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  EU
  EZ
  FI
  FJ
  FK
  FM
  FO
  FR
  FX
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  IC
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IR
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KP
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MH
  MK
  ML
  MM
  MN
  MO
  MP
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NF
  NG
  NI
  NL
  NO
  NP
  NR
  NT
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PW
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SD
  SE
  SF
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SU
  SV
  SX
  SY
  SZ
  TA
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TP
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  UK
  UM
  UNDEFINED
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VI
  VN
  VU
  WF
  WS
  XK
  YE
  YT
  YU
  ZA
  ZM
  ZR
  ZW
}

enum CopyrightType {
  C
  P
}

enum ReleaseDatePrecisionType {
  DAY
  MONTH
  YEAR
}

enum SpotifyPoductType {
  BASIC_DESKTOP
  DAYPASS
  FREE
  OPEN
  PREMIUM
}

enum SpotifyModelType {
  ALBUM
  ARTIST
  AUDIO_FEATURES
  EPISODE
  GENRE
  PLAYLIST
  SHOW
  TRACK
  USER
}
